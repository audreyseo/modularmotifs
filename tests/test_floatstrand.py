from modularmotifs.core.float import FloatStrand
from modularmotifs.core.motif import Color

import pytest
from enum import Enum

# Tests generated by chatgpt


@pytest.fixture
def valid_floatstrand():
    return FloatStrand(start=5, length=10, row=3, color=Color.BACK)


@pytest.fixture
def floatstrand_no_color():
    return FloatStrand(start=10, length=5, row=4)


@pytest.fixture
def floatstrand_invisible_color():
    # This should raise an assertion error due to invisible color
    with pytest.raises(AssertionError):
        return FloatStrand(start=0, length=7, row=1, color=Color.INVIS)


def test_initialization(valid_floatstrand):
    # Test that the initialization works properly and attributes are set
    assert valid_floatstrand._FloatStrand__start == 5
    assert valid_floatstrand._FloatStrand__length == 10
    assert valid_floatstrand._FloatStrand__rownum == 3
    assert valid_floatstrand._FloatStrand__color == Color.BACK


def test_no_color_initialization(floatstrand_no_color):
    # Test that initialization without color works
    assert floatstrand_no_color._FloatStrand__color is None


def test_assert_invisible_color(floatstrand_invisible_color):
    # Test that an invisible color raises an assertion error
    pass  # This is handled by pytest.raises, so no action is needed here


def test_has_row(valid_floatstrand):
    # Test that has_row returns True when a row number is set
    assert valid_floatstrand.has_row() is True


def test_has_row_no_row(floatstrand_no_color):
    # Test that has_row returns False when no row number is set
    floatstrand = FloatStrand(start=10, length=5)  # No row, default is -1
    assert not floatstrand.has_row()


def test_get_row(valid_floatstrand):
    # Test that get_row returns the correct row number
    assert valid_floatstrand.get_row() == 3


def test_get_row_no_row(floatstrand_no_color):
    # Test that get_row returns -1 if no row number is set
    floatstrand = FloatStrand(start=10, length=5)
    assert floatstrand.get_row() == -1


def test_has_color(valid_floatstrand, floatstrand_no_color):
    # Test that has_color returns True when a color is set
    assert valid_floatstrand.has_color() is True
    # Test that has_color returns False when no color is set
    assert floatstrand_no_color.has_color() is False


def test_get_color(valid_floatstrand, floatstrand_no_color):
    # Test that get_color returns the correct color when set
    assert valid_floatstrand.get_color() == Color.BACK
    # Test that get_color returns None when no color is set
    assert floatstrand_no_color.get_color() is None


def test_len(valid_floatstrand):
    # Test that __len__ returns the correct length
    assert len(valid_floatstrand) == 10


def test_x_left(valid_floatstrand):
    # Test that x_left returns the correct left x-coordinate
    assert valid_floatstrand.x_left() == 5


def test_x_right(valid_floatstrand):
    # Test that x_right returns the correct right x-coordinate
    assert valid_floatstrand.x_right() == 16  # 5 + 10 + 1


def test_xs(valid_floatstrand):
    # Test that xs returns the tuple of left and right x-coordinates
    assert valid_floatstrand.xs() == (5, 16)
